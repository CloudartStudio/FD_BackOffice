import T_utenti_login from "../../../../../models/sql_model/T_utenti_login";
import { hashPassword, generateRandomPassword } from "../../../../../helpers/auth";
import MailSender from "../../../../../helpers/mailSender";
import T_admin from "../../../../../models/sql_model/T_admin";
import { authOptions } from "pages/api/auth/[...nextauth]";
import { getServerSession } from "next-auth/next";

const postReq = async (req, res) => {
    try {
        const { admin_name, email } = req.body;

        const newT_Admin = new T_admin(null, admin_name, email);

        const returnObj = await newT_Admin.insertOne();
        const id = (await T_admin.fetchOneByField("email", email)).ID;
        const autoGeneratedPassword = generateRandomPassword("high", 16);
        console.log("SALVA LA PASSWORD MICHELE!!!!!!!!", autoGeneratedPassword);
        const newT_utenti_login = new T_utenti_login(id, 1, await hashPassword(autoGeneratedPassword));
        const result = await newT_utenti_login.insertOne();

        const mailSender = new MailSender("lunghimicheledev@gmail.com", "Mi55TaLab4nn4n4");
        mailSender.sendMail(
            email,
            "Password for your new account",
            `<h1>Your password is: ${autoGeneratedPassword}</h1<h3>your account name is:${email}</h3><b>Change it as soon as possible</b>`
        );

        return res.status(201).json(returnObj);
    } catch (error) {
        res.status(500).send({ message: "Error creating new T_admin", error: error });
    }
};

const getReq = async (req, res) => {
    try {
        const result = await T_admin.fetchAll();
        res.status(200).json(result);
    } catch (error) {
        res.status(500).send({ message: "Error fetching T_admin data", error: error });
    }
};

export default async (req, res) => {
    try {
        const session = await getServerSession(req, res, authOptions);

        if (!session || session.user.email.ID_ruolo > 1) {
            return res.status(401).json({ message: "Non autorizzato" });
        }

        if (req.method === "POST") {
            await postReq(req, res);
        } else if (req.method === "GET") {
            await getReq(req, res);
        } else {
            res.status(405).send({ message: "Method Not Allowed" });
        }
    } catch (error) {
        res.status(500).send({ message: "Internal Server Error", error: error });
    }
};
