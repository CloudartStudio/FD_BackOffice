import T_cliente_partener_b2b from "../../../../../../models/sql_model/T_cliente_partener_b2b";
import { hashPassword, generateRandomPassword } from "../../../../../../helpers/auth";
import MailSender from "../../../../../../helpers/mailSender";
import T_utenti_login from "../../../../../../models/sql_model/T_utenti_login";

const postReq = async (req, res) => {
    try {
        const {
            ID_partner,
            ragione_sociale,
            partita_iva,
            codice_sdi,
            telefono,
            cellulare,
            indirizzo,
            nome,
            pec,
            email,
            indirizzo_sede_fisica,
            indirizzo_sede_legale,
        } = req.body;

        const mewTcliente_p_b2b = new T_cliente_partener_b2b(
            null,
            ID_partner,
            ragione_sociale,
            partita_iva,
            codice_sdi,
            telefono,
            cellulare,
            indirizzo,
            nome,
            pec,
            email,
            indirizzo_sede_fisica,
            indirizzo_sede_legale
        );

        const returnObj = await mewTcliente_p_b2b.insertOne();
        const id = (await T_cliente_partener_b2b.fetchOneByField("email", email)).ID;
        const autoGeneratedPassword = generateRandomPassword("high", 16);
        console.log("SALVA LA PASSWORD MICHELE!!!!!!!!", autoGeneratedPassword);
        const newT_utenti_login = new T_utenti_login(id, 4, await hashPassword(autoGeneratedPassword));
        const result = await newT_utenti_login.insertOne();

        const mailSender = new MailSender("lunghimicheledev@gmail.com", "Mi55TaLab4nn4n4");
        mailSender.sendMail(
            email,
            "Password for your new account",
            `<h1>Your password is: ${autoGeneratedPassword}</h1<h3>your account name is:${email}</h3><b>Change it as soon as possible</b>`
        );

        return res.status(201).json(returnObj);
    } catch (error) {
        res.status(500).send({ message: "Error creating new T_cliente_partener_b2b", error: error });
    }
};

const getReq = async (req, res) => {
    try {
        const result = await T_cliente_partener_b2b.fetchAll();
        res.status(200).json(result);
    } catch (error) {
        res.status(500).send({ message: "Error fetching T_cliente_partener_b2b data", error: error });
    }
};

export default async (req, res) => {
    try {
        if (req.method === "POST") {
            await postReq(req, res);
        } else if (req.method === "GET") {
            await getReq(req, res);
        } else {
            res.status(405).send({ message: "Method Not Allowed" });
        }
    } catch (error) {
        res.status(500).send({ message: "Internal Server Error", error: error });
    }
};
